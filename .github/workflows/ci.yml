# GitHub Actions Workflow for Docker CI
# Required Secrets:
# - DOCKER_USERNAME: Docker Hub 用户名，用于登录 Docker Hub
# - DOCKER_PASSWORD: Docker Hub 密码，用于登录 Docker Hub
# - DOCKER_IMAGE_URL: Docker 镜像的 URL，示例值：yourdomain.com/libraryname/imagename:tagname
# - PARAM_ARRAY: JSON 格式的参数数组，用于 -s 参数传递，示例值：["参数1", "参数2", "参数3"]

name: Docker CI with JSON Array

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Check out the repository
        uses: actions/checkout@v2

      # Step 2: Extract registry from DOCKER_IMAGE_URL
      - name: Extract registry from DOCKER_IMAGE_URL
        id: extract_registry
        run: |
          # Get DOCKER_IMAGE_URL from secrets
          DOCKER_IMAGE_URL="${{ secrets.DOCKER_IMAGE_URL }}"
          # Use regex to extract registry part (everything before the first '/')
          REGISTRY=$(echo "$DOCKER_IMAGE_URL" | sed -E 's|([^/]+)/.*|\1|')
          # Set REGISTRY as an output variable
          echo "::set-output name=REGISTRY::$REGISTRY"
          
      # Step 2: 登录 Docker Hub（如果需要登录）
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.extract_registry.outputs.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: 恢复 Docker 镜像缓存
      - name: Restore Docker image cache
        uses: actions/cache@v3
        with:
          path: /tmp/docker-image-cache
          key: ${{ runner.os }}-docker-image-cg-runner
          restore-keys: |
            ${{ runner.os }}-docker-image-

      # Step 4: 加载缓存的 Docker 镜像（如果存在）
      - name: Load Docker image from cache
        if: steps.restore.outputs.cache-hit == 'true'
        run: docker load -i /tmp/docker-image-cache/cg-runner.tar || echo "No cached image found, pulling new image"

      # Step 5: 拉取并保存 Docker 镜像（如果没有缓存）
      - name: Pull and save Docker image
        run: |
          if [[ ! -f /tmp/docker-image-cache/cg-runner.tar ]]; then
            docker pull ${{ secrets.DOCKER_IMAGE_URL }}
            mkdir -p /tmp/docker-image-cache
            docker save ${{ secrets.DOCKER_IMAGE_URL }} -o /tmp/docker-image-cache/cg-runner.tar
          fi

      # Step 6: 解析 JSON 数组并循环运行容器
      - name: Run Docker container with JSON array
        env:
          PARAM_ARRAY: ${{ secrets.PARAM_ARRAY }}
        run: |
          # 使用 jq 解析 JSON 数组
          for param in $(echo "${PARAM_ARRAY}" | jq -r '.[]'); do
            echo "Running container with -s parameter: $param"
            docker run --rm --name cg-runner ${{ secrets.DOCKER_IMAGE_URL }} \
              java -jar /app/cg-runner.jar -s "$param"
          done
